import json
import os
import types
from dotenv import load_dotenv
import schedule
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from telebot import *
import requests as req
from geopy import geocoders, Nominatim
from datetime import *
import time
import sqlite3


load_dotenv()
###

TOKEN = os.getenv('TOKEN')
TOKEN_YANDEX = os.getenv('TOKEN_YANDEX')


bot = telebot.TeleBot(TOKEN)


connection = sqlite3.connect('my_database.db', check_same_thread=False)
cursor = connection.cursor()


cursor.execute('''
CREATE TABLE IF NOT EXISTS Cities (
"chat_id" INTEGER NOT NULL,
"city" TEXT,
"city_time" TEXT,
PRIMARY KEY("chat_id"))
''')


def geo_pos(city: str):
    geolocator = geocoders.Nominatim(user_agent="telebot")
    latitude = str(geolocator.geocode(city).latitude)
    longitude = str(geolocator.geocode(city).longitude)
    
    return latitude, longitude


def yandex_weather(latitude, longitude, TOKEN_YANDEX: str):
    url_yandex = f'https://api.weather.yandex.ru/v2/informers/?lat={latitude}&lon={longitude}&[lang=ru_RU]'
    yandex_req = req.get(url_yandex, headers={'X-Yandex-API-Key': TOKEN_YANDEX}, verify=False)
    conditions = {'clear': '—è—Å–Ω–æ', 'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ', 'cloudy': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
                  'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ', 'drizzle': '–º–æ—Ä–æ—Å—å', 'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
                  'rain': '–¥–æ–∂–¥—å', 'moderate-rain': '—É–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π', 'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
                  'continuous-heavy-rain': '–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', 'showers': '–ª–∏–≤–µ–Ω—å',
                  'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º', 'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥', 'snow': '—Å–Ω–µ–≥',
                  'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥', 'hail': '–≥—Ä–∞–¥', 'thunderstorm': '–≥—Ä–æ–∑–∞',
                  'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π', 'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'
                  }
    wind_dir = {'nw': '—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'n': '—Å–µ–≤–µ—Ä–Ω–æ–µ', 'ne': '—Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 'e': '–≤–æ—Å—Ç–æ—á–Ω–æ–µ',
                'se': '—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω–æ–µ', 's': '—é–∂–Ω–æ–µ', 'sw': '—é–≥–æ-–∑–∞–ø–∞–¥–Ω–æ–µ', 'w': '–∑–∞–ø–∞–¥–Ω–æ–µ', '—Å': '—à—Ç–∏–ª—å'}

    yandex_json = json.loads(yandex_req.text)
    yandex_json['fact']['condition'] = conditions[yandex_json['fact']['condition']]
    yandex_json['fact']['wind_dir'] = wind_dir[yandex_json['fact']['wind_dir']]
    for parts in yandex_json['forecast']['parts']:
        parts['condition'] = conditions[parts['condition']]
        parts['wind_dir'] = wind_dir[parts['wind_dir']]

    pogoda = dict()
    params = ['condition', 'wind_dir', 'pressure_mm', 'humidity']
    for parts in yandex_json['forecast']['parts']:
        pogoda[parts['part_name']] = dict()
        pogoda[parts['part_name']]['temp'] = parts['temp_avg']
        for param in params:
            pogoda[parts['part_name']][param] = parts[param]

    pogoda['fact'] = dict()
    pogoda['fact']['temp'] = yandex_json['fact']['temp']
    for param in params:
        pogoda['fact'][param] = yandex_json['fact'][param]

    pogoda['link'] = yandex_json['info']['url']
    return pogoda


def print_yandex_weather(dict_weather_yandex, message):
    day = {'night': '–Ω–æ—á—å—é', 'morning': '—É—Ç—Ä–æ–º', 'day': '–¥–Ω–µ–º', 'evening': '–≤–µ—á–µ—Ä–æ–º', 'fact': '—Å–µ–π—á–∞—Å'}
    bot.send_message(message.from_user.id, f'–ü–æ–≥–æ–¥–∞ –Ω–∞ –¥–µ–Ω—å:')
    for i in dict_weather_yandex.keys():
        if i != 'link':
            time_day = day[i]
            bot.send_message(message.from_user.id, f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {time_day} {dict_weather_yandex[i]["temp"]}¬∞'
                                                   f', {dict_weather_yandex[i]["condition"]}')

    bot.send_message(message.from_user.id, f' –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: '
                                           f'{dict_weather_yandex["link"]}')


def big_weather(message, city):
    latitude, longitude = geo_pos(city)
    yandex_weather_x = yandex_weather(latitude, longitude, TOKEN_YANDEX)
    print_yandex_weather(yandex_weather_x, message)


def add_city(message):
  try:
      latitude, longitude = geo_pos(message.text.lower().split('–≥–æ—Ä–æ–¥ ')[1])
      city = message.text.lower().split('–≥–æ—Ä–æ–¥ ')[1]
      

      cursor.execute(f"SELECT * FROM Cities WHERE chat_id = {message.from_user.id}")
      existing_record = cursor.fetchone()
      
      if existing_record is None:

          cursor.execute(f"INSERT INTO Cities (chat_id, city) VALUES ({message.from_user.id}, '{city}')")
      else:

          cursor.execute(f"UPDATE Cities SET city = '{city}' WHERE chat_id = {message.from_user.id}")
      
      connection.commit()
      

      cities[message.from_user.id] = city
      
      return cities, 0
  except Exception as err:
      bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞: {err}")
      return cities, 1


cities = {}


startkeyboard = ("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è", "üå¶Ô∏è –ü–æ–≥–æ–¥–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "ü§ñ –û –±–æ—Ç–µ")
settingskeyboard = ("üì£ –†–∞—Å—Å—ã–ª–∫–∞", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", "üïí –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏", "‚Ü©Ô∏è –ù–∞–∑–∞–¥")


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*startkeyboard)
    bot.send_message(message.from_user.id,
                     '–ö—Ä–∞—Ç–∫–∏–π –≥–∞–π–¥ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:'
                     '\n1. –ù–∞–ø–∏—à–∏—Ç–µ –≥–æ—Ä–æ–¥ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.'
                     '\n2. –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ú–æ–π –≥–æ—Ä–æ–¥ *****¬ª —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ü–æ–≥–æ–¥–∞¬ª —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥.'
                     '\n3. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /repeat.'
                     '\n4. –û –±–æ—Ç–µ /about!'
                     '\n–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥/–≥–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω —á—Ç–æ–±—ã —è —Å–∫–∏–Ω—É–ª –í–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!', reply_markup=markup)


def sheduler(message):
   global should_repeat
   should_repeat = True
   def return_weather(message):
       
       cursor.execute(f"SELECT city FROM Cities WHERE chat_id = {message.from_user.id}")
       city = cursor.fetchone()

       if city is not None:
           
           city = city[0]
           bot.send_message(message.from_user.id, f'{message.from_user.first_name}!'
                                               f' –ü–æ–≥–æ–¥–∞ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ: {city}')
           big_weather(message, city)
       else:
           
           bot.send_message(message.from_user.id, f'{message.from_user.first_name}!'
                                               f' –Ø –Ω–µ –∑–Ω–∞—é –≤–∞—à –≥–æ—Ä–æ–¥!\n–ù–∞–ø–∏—à–∏—Ç–µ: '
                                               f'–ú–æ–π –≥–æ—Ä–æ–¥ ***** –∏ –±–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –í–∞—à —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ—Ä–æ–¥!')
           

   global bot_time
   bot_time = None
   if bot_time is not None:
    second_cursor = cursor.execute(f"SELECT city FROM Cities")
    second_city = second_cursor.fetchone()
    if second_city is not None:
        schedule.every().day.at(bot_time).do(return_weather, message)
        bot.send_message(message.from_user.id, f"–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥! \n–ü–æ–≥–æ–¥–∞ –±—É–¥–µ—Ç –í–∞–º —Ä–∞—Å—Å—ã–ª–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {bot_time} —É—Ç—Ä–∞!")
        while True:
            if not should_repeat:
                break
            schedule.run_pending()
            time.sleep(1)
    else:
        bot.send_message(message.from_user.id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥!")
   else:
       bot.send_message(message.from_user.id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤—Ä–µ–º—è!")
       return repeat_time(message)

# —Å–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤—ã–π—Ç–∏




def notrepeat(message):
    global should_repeat
    should_repeat = False
    bot.send_message(message.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")


def repeat_time(message):
    markup_time = InlineKeyboardMarkup()
    row = []
    for i in range(24):
        hour = str(i).zfill(2)
        button = types.InlineKeyboardButton(text=hour+':00', callback_data=hour+':00')
        row.append(button)
        if (i + 1) % 4 == 0:
            markup_time.row(*row)
            row = []
    if row:
        markup_time.row(*row)
    bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:", reply_markup=markup_time)



@bot.callback_query_handler(func=lambda call:True)
def repeat_time_callback(call):
    global bot_time
    for _ in range(5):
        try:
            if call.data:
                
                bot_time = call.data

                bot.send_message(call.message.chat.id, f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {bot_time}')
                return bot_time
            break 
        except req.exceptions.ConnectionError:
            time.sleep(1)  



@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    global cities
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)


    for _ in range(5):
        try:
            if message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è":
                bot.send_message(message.from_user.id,
                         f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!'
                         f' –ù–∞–ø–∏—à–∏—Ç–µ  —Å–ª–æ–≤–æ "–ø–æ–≥–æ–¥–∞" –∏ —è –Ω–∞–ø–∏—à—É –ø–æ–≥–æ–¥—É –≤ –í–∞—à–µ–º'
                         f' "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º" –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã —Å–µ–π—á–∞—Å')
        
            elif message.text == "üå¶Ô∏è –ü–æ–≥–æ–¥–∞":
       
                cursor.execute(f"SELECT city FROM Cities WHERE chat_id = {message.from_user.id}")
                city = cursor.fetchone()
        
                if city is not None:
                    city = city[0]
                    bot.send_message(message.from_user.id, f'{message.from_user.first_name}!'
                                                            f' –ü–æ–≥–æ–¥–∞ –≤ —Ç–≤–æ—ë–º –≥–æ—Ä–æ–¥–µ: {city}')
                    big_weather(message, city)


                else:
                    bot.send_message(message.from_user.id, f'{message.from_user.first_name}!'
                                                       f' –Ø –Ω–µ –∑–Ω–∞—é –í–∞—à –≥–æ—Ä–æ–¥!\n–ù–∞–ø–∏—à–∏—Ç–µ: '
                                                       f'–ú–æ–π –≥–æ—Ä–æ–¥ ***** –∏ –±–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –í–∞—à —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≥–æ—Ä–æ–¥!')
            elif message.text == "ü§ñ –û –±–æ—Ç–µ":
                bot.send_message(message.from_user.id, 
                         '–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å!'
                         '\n–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–º –≥—Ä—É–ø–ø—ã –ò–°31-21 –†—É–¥–æ–≤—ã–º –Ø.–í.', reply_markup=markup)
        
            elif message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":

                markup.add(*settingskeyboard)
                bot.send_message(message.chat.id, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=markup)

            elif message.text == "üì£ –†–∞—Å—Å—ã–ª–∫–∞":
                return sheduler(message)

            elif message.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É":
                return notrepeat(message)
            
            elif message.text == "üïí –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏":
                return repeat_time(message)


            elif message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
                markup.add(*startkeyboard)
                bot.send_message(message.chat.id, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

            elif message.text.lower()[:9] == "–º–æ–π –≥–æ—Ä–æ–¥":
                cities, flag = add_city(message)
                if flag == 0:
                    bot.send_message(message.from_user.id, f'{message.from_user.first_name}!'
                                                           f' –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é –í–∞—à –≥–æ—Ä–æ–¥! —ç—Ç–æ'
                                                           f' {cities[message.from_user.id]}')

                else:
                    bot.send_message(message.from_user.id, f'{message.from_user.first_name}!'
                                                           f' –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

            else:
                try:
                    city = message.text
                    bot.send_message(message.from_user.id,
                                     f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!'
                                     f'\n–í–∞—à –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥: {city}')

                    big_weather(message, city)

                except AttributeError as err:
                    bot.send_message(message.from_user.id, f'{message.from_user.first_name}!,'
                                                           f' –Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞.'
                                                           f'\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!')
                    print(f'–û—à–∏–±–∫–∞: {err}')

            break
        except req.exceptions.ConnectionError:
            time.sleep(1)


bot.polling(none_stop=True)